<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.hk.ansboard">

	<!-- **resultMap 을 쓰므로서 훨씬 쉽게 할수 있음을 배웠다 -->
	<resultMap type="com.min.inschool.dtos.Answer_T_Dtos" id="Answer_T_DtosMap">

		<result property="a_seq" column="A_SEQ"></result>
		<result property="a_title" column="A_TITLE"></result>
		<result property="a_content1" column="A_CONTENT1"></result>
		<result property="a_content2" column="A_CONTENT2"></result>
		<result property="a_content3" column="A_CONTENT3"></result>
		<result property="a_name" column="A_NAME"></result>
		<result property="a_regdate" column="A_REGDATE"></result>
		<result property="a_recount" column="A_RECOUNT"></result>
		<result property="a_unum" column="A_UNUM"></result>
		<result property="a_comnum" column="A_COMNUM"></result>
		<result property="a_boardname" column="A_BOARDNAME"></result>
		<result property="a_ansnum" column="A_ANSNUM"></result>
		<result property="a_ref" column="A_REF"></result>
		<result property="a_step" column="A_STEP"></result>
		<result property="a_depth" column="A_DEPTH"></result>
		<result property="v_oriname" column="V_ORINAME"></result>
		<result property="v_type" column="V_TYPE"></result>
		<result property="v_filesize" column="V_FILESIZE"></result>
		<result property="img_name" column="IMG_NAME"></result>
		<result property="img_size" column="IMG_SIZE"></result>
		<result property="v_img_regdate" column="V_IMG_REGDATE"></result>
		<result property="a_option" column="A_OPTION"/>
		<collection property="funtion_T_Dtos" resultMap="Funtion_T_DtosMap"></collection> <!--resultMap : id 밑에 resultMap의 id 를 받으면서 Funtion_T_Dtos의 칼럼을 모두 가질수 있다. -->


	</resultMap>

	<resultMap type="com.min.inschool.dtos.Funtion_T_Dtos" id="Funtion_T_DtosMap">

		<result property="f_like" column="F_LIKE"></result>
		<result property="f_save" column="F_SAVE"></result>
		<result property="f_unum" column="f_unum"></result>
		<result property="f_comnum" column="F_COMNUM"></result>
		<result property="a_seq" column="A_SEQ"></result>


	</resultMap>



	<!--1. 모든 데이터를 가져온다. + 좋아요 -->
	<select id="boardlist" resultMap="Answer_T_DtosMap" >

		SELECT A.A_SEQ, A.A_TITLE, A.A_CONTENT1, A.A_CONTENT2, A.A_CONTENT3, A.A_NAME, A.A_REGDATE, A.A_RECOUNT,
		A.A_UNUM, A.A_COMNUM, A.A_BOARDNAME, A.A_ANSNUM, A.A_REF, A.A_STEP, A.A_DEPTH, A.V_ORINAME, A.V_TYPE, A.V_FILESIZE, A.IMG_NAME, A.IMG_SIZE, A.V_IMG_REGDATE,
		NVL(F.F_LIKE,0) F_LIKE, A_OPTION FROM ANSWER_T A LEFT OUTER JOIN (SELECT A_SEQ, COUNT(F_LIKE) F_LIKE FROM FUNCTION_T GROUP BY A_SEQ) F ON A.A_SEQ=F.A_SEQ
	
	</select>

	<!--2.게시판에 글쓰는 쿼리 + 글을쓸경우 자동으로 기능쿼리도 A_SEQ에 맞춰서 추가되어야한다? -->
	<insert id="insertboard" parameterType="Answer_T_Dtos">
	
	INSERT INTO TEAMWORK.ANSWER_T
	(A_SEQ, A_TITLE, A_CONTENT1,A_CONTENT2,A_CONTENT3, A_NAME, A_REGDATE, A_RECOUNT, A_UNUM,A_COMNUM , A_BOARDNAME, A_ANSNUM, A_REF, A_STEP, A_DEPTH, V_ORINAME, V_TYPE, V_FILESIZE, IMG_NAME, IMG_SIZE, V_IMG_REGDATE,A_OPTION)
	VALUES(ANSWER_T_SEQ.NEXTVAL,#{a_title}, #{a_content1},'2','안녕하세요 하하입니다', 'USER', SYSDATE, 0, 'U49','C30','UV',0, (SELECT NVL(MAX(A_REF)+1,0) A_REF FROM ANSWER_T), 0, 0,#{v_oriname},#{v_type},#{v_filesize},#{img_name},#{img_size},SYSDATE,#{a_option})
	
	</insert>
	
	<!--3.게시판 상세보는 쿼리  -->
	<select id="detailboard" parameterType="Answer_T_Dtos" resultMap="Answer_T_DtosMap">
	
		SELECT A.A_SEQ, A.A_TITLE, A.A_CONTENT1, A.A_CONTENT2, A.A_CONTENT3, A.A_NAME, A.A_REGDATE, A.A_RECOUNT,
		A.A_UNUM, A.A_COMNUM, A.A_BOARDNAME, A.A_ANSNUM, A.A_REF, A.A_STEP, A.A_DEPTH, A.V_ORINAME, A.V_TYPE, A.V_FILESIZE, A.IMG_NAME, A.IMG_SIZE, A.V_IMG_REGDATE,
		NVL(F.F_LIKE,0) F_LIKE,A_OPTION FROM ANSWER_T A LEFT OUTER JOIN (SELECT A_SEQ, COUNT(F_LIKE) F_LIKE FROM FUNCTION_T GROUP BY A_SEQ) F ON A.A_SEQ=F.A_SEQ WHERE A.A_SEQ=#{a_seq}
			
	</select>
	
	
	<!-- 4.조회수를 증가시키는 쿼리  -->
	<update id="updatecount" parameterType="int">
	
		UPDATE ANSWER_T SET A_RECOUNT=A_RECOUNT+1 WHERE a_seq = #{seq}
		
	</update>
	
	<!-- 5.댓글다는 쿼리  -->
	<insert id="insertcomment" parameterType="REPLY_T_Dtos">
	
	INSERT INTO TEAMWORK.REPLY_T
	(R_SEQ,R_CONTENT, R_REF, R_DEPTH, R_UNUM, R_BOARDNAME ,R_REGDATE,A_SEQ)
	VALUES(REPLY_T_SEQ.NEXTVAL,#{r_content},(SELECT NVL(MAX(R_REF)+1,0) FROM REPLY_T WHERE A_SEQ=#{a_seq}), 0,#{r_unum}, #{r_boardname}, SYSDATE, #{a_seq})
	
	</insert>
	
	<!-- 6.게시글 댓글을 가져오는 쿼리  -->
	<select id="commentlist" resultType="REPLY_T_Dtos" parameterType="REPLY_T_Dtos">
	
	SELECT R_SEQ, R_CONTENT, R_REF, R_DEPTH, R_UNUM, R_BOARDNAME, R_REGDATE, A_SEQ
	FROM TEAMWORK.REPLY_T WHERE A_SEQ=#{a_seq}
	
	</select>
			
	<!-- 7.좋아요를 증가시키는 쿼리  -->
	<insert id="insertlike" parameterType="Answer_T_Dtos">
	
	INSERT INTO FUNCTION_T (F_LIKE,F_SAVEORLIKE,F_UNUM,F_COMNUM,A_SEQ) VALUES((SELECT NVL(MAX(F_LIKE)+1,1) FROM FUNCTION_T WHERE A_SEQ=#{a_seq}),'L','U49','C14',#{a_seq})

	</insert>
	
	<!--8.좋아요 삭제하는 쿼리  -->
	<delete id="deletelike" parameterType="Answer_T_Dtos">
	
	DELETE FROM FUNCTION_T WHERE A_SEQ=#{a_seq} AND F_UNUM='U49' AND F_SAVEORLIKE ='L'
	
	</delete>
	
	<!--9.좋아요를 조회하는 쿼리  -->
	<select id="selectlike" parameterType="Answer_T_Dtos" resultType="Funtion_T_Dtos">
	
	SELECT F_SAVEORLIKE,F_UNUM,(SELECT count(F_LIKE) FROM FUNCTION_T) F_lIKE FROM FUNCTION_T WHERE F_UNUM=#{a_unum} AND A_SEQ=#{a_seq}
	
	</select>
	
	<!--10.즐겨찾기 하는 쿼리  -->
	<insert id="insertsearch" parameterType="Answer_T_Dtos">
	
	INSERT INTO FUNCTION_T (F_SAVEORLIKE,F_UNUM,F_COMNUM,A_SEQ) VALUES('S','U20','C14',#{a_seq})
	
	</insert>
	
	<!--11.즐겨찾기를 가져오는 쿼리  -->
	<select id="selectsearch" parameterType="Answer_T_Dtos" resultType="Funtion_T_Dtos">
	
	SELECT F_SAVEORLIKE,F_UNUM FROM FUNCTION_T WHERE F_UNUM='U20' AND A_SEQ=#{a_seq}
	
	</select>
	
	<!--12.즐겨찾기를 삭제하는 쿼리  -->
	
	<delete id="deletesearch" parameterType="Answer_T_Dtos">
	
	DELETE FROM FUNCTION_T WHERE A_SEQ=#{a_seq} AND F_UNUM='U20' AND F_SAVEORLIKE ='S'
	
	</delete>
	
	<!--13.댓글을 삭제하는 쿼리  -->
	<delete id="deletecomment" parameterType="REPLY_T_Dtos">
	
	DELETE FROM REPLY_T WHERE R_SEQ=#{r_seq}
	
	</delete>
	
	<!--14.게시글을 삭제하는쿼리 (게시글과 댓글이 PK-FK관계이므로 FK를 지운다음에 PK를 지워야한다 따라서 Transaction을 써서 지우도록 하겠다)  -->
	
	<delete id="deleteAllcomment" parameterType="int">
	
	DELETE FROM REPLY_T WHERE A_SEQ=#{a_seq}
	
	</delete>
	
	<delete id="deleteAllfunction" parameterType="int">
	
	DELETE FROM FUNCTION_T WHERE A_SEQ=#{a_seq}
	
	</delete>
	
	<delete id="deleteboard" parameterType="int">
	
	DELETE FROM ANSWER_T WHERE A_SEQ=#{a_seq} 	
	
	</delete>
	
	<!--15.답글다는 쿼리 -->
	
	<update id="replyBoardUpdate" parameterType="Answer_T_Dtos">
	
	UPDATE ANSWER_T SET A_STEP=A_STEP+1
	WHERE A_REF = (SELECT A_REF FROM ANSWER_T WHERE A_SEQ=#{a_seq}) AND
	A_STEP > (SELECT A_STEP FROM ANSWER_T WHERE A_SEQ=#{a_seq})
		
	</update>
		
	<insert id="replyBoardInsert" parameterType="Answer_T_Dtos">
	
	INSERT INTO ANSWER_T 
	(A_SEQ, A_TITLE, A_CONTENT1,A_CONTENT2,A_CONTENT3, A_NAME, A_REGDATE, A_RECOUNT,
	A_UNUM, A_COMNUM,A_BOARDNAME, A_ANSNUM,
	A_REF, A_STEP, A_DEPTH,
	V_ORINAME, V_TYPE, V_FILESIZE, IMG_NAME, IMG_SIZE,V_IMG_REGDATE)
	VALUES
	(ANSWER_T_SEQ.NEXTVAL,#{a_title},#{a_content1},'2','안녕하세요 하하입니다', 'USER', SYSDATE,0,
	'U49','C30','UV', 0,
	(SELECT A_REF FROM ANSWER_T WHERE A_SEQ=#{a_seq}),(SELECT A_STEP FROM ANSWER_T WHERE A_SEQ=#{a_seq})+1,(SELECT A_DEPTH FROM ANSWER_T WHERE A_SEQ=#{a_seq})+1,
	#{v_oriname},#{v_type},#{v_filesize},#{img_name},#{img_size},SYSDATE)
	
	</insert>
	
	<!--16.댓글에 댓글다는 쿼리  -->
	
	<insert id="DoublecommentBoardInsert" parameterType="REPLY_T_Dtos">
	
	INSERT INTO REPLY_T
	(R_SEQ, R_CONTENT, R_REF, R_DEPTH, R_UNUM, R_BOARDNAME, R_REGDATE, A_SEQ)
	VALUES(REPLY_T_SEQ.NEXTVAL,#{r_content},(SELECT R_REF FROM ANSWER_T WHERE R_SEQ=#{r_seq}),
	(SELECT R_DEPTH FROM ANSWER_T WHERE R_SEQ=#{r_seq})+1, 'U20', 'UV', SYSDATE, #{a_seq});
	
	
	</insert>
	
	<!--17. 수정하는 쿼리 -->
	
	<select id="updataboard" parameterType="Answer_T_Dtos">
	
	UPDATE TEAMWORK.ANSWER_T
	SET A_TITLE=#{a_title}, A_CONTENT1=#{a_content1},A_REGDATE=SYSDATE, V_ORINAME=#{v_oriname}, V_TYPE=#{v_type}, V_FILESIZE=#{v_filesize}, IMG_NAME=#{img_name}, IMG_SIZE=#{img_size},
	V_IMG_REGDATE=SYSDATE,A_OPTION=#{a_option} WHERE A_SEQ=#{a_seq}
	
	</select>
	
	<!--페이지수를 결정 하는 쿼리,데이터의 수를 파악해서 올려줌 -->
	<select id="boardcount" resultType="int">
	
		SELECT CEIL(COUNT(*)/10) as COUNT FROM ANSWER_T
		
	
	</select>

	
	
	
	

</mapper>